from telethon import TelegramClient, events
import aiohttp

import asyncio
import json
import sys
import io
import threading

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
with open("config.json", encoding="utf-8") as f:
    config = json.load(f)

api_id = config["api_id"]
api_hash = config["api_hash"]
phone_number = config["phone_number"]
text_to_watch = config["text_to_watch"]
SEND_TO = config["send_to"]
DISCORD_WEBHOOK_URL = config["discord_webhook_url"]
DISCORD_PING_TEXT = config["discord_ping_text"]
TELEGRAM_TARGET = config.get("telegram_target", "me") # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç—É–ø–æ–π –∏ —Ö–µ—Ä—å –ø–æ—Å—Ç–∞–≤–∏–ª —Å—é–¥–∞ —Ç–æ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Å—Ç–∞–≤–∏—Ç 'me'

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å —è–∑—ã–∫–∞ <–û—à–∏–±–∫–∞ 742389423> –Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ :) ===
class FilteredStderr(io.TextIOBase):
    def __init__(self, original_stderr):
        self.original_stderr = original_stderr
        self.lock = threading.Lock()

    def write(self, text):
        if "WinError 1236" in text or "WinError 10053" in text:
            with self.lock:
                self.original_stderr.write("\u2757 –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram(telethon), –º–æ–∂–µ—Ç–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ —É –≤–∞—Å —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n")
        elif "WinError 5" in text:
            with self.lock:
                self.original_stderr.write("\u2757\u2757 –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram(telethon), –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. \uD83D\uDD01–ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...\n")
        else:
            with self.lock:
                self.original_stderr.write(text)

    def flush(self):
        with self.lock:
            self.original_stderr.flush()

sys.stderr = FilteredStderr(sys.stderr)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient("session_name", api_id, api_hash)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
def check_mentions(message):
    message_lower = message.lower()
    return any(username.lower() in message_lower for username in text_to_watch)

# === –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–≥ ===
async def get_channel_link(event):
    channel = await event.get_chat()
    if hasattr(channel, "username") and channel.username:
        return f"https://t.me/{channel.username}/{event.message.id}"
    return None

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–≥ ===
async def send_telegram_notification(text):
    await client.send_message(TELEGRAM_TARGET, text, link_preview=False)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –î–∏—Å–∫–æ—Ä–¥ ===
async def send_discord_notification(text):
    content = f"{DISCORD_PING_TEXT}\n{text}" if DISCORD_PING_TEXT else text
    async with aiohttp.ClientSession() as session:
        await session.post(DISCORD_WEBHOOK_URL, json={"content": content})

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
async def notify_all(prefix, event):
    message = event.message.message or ""
    if not check_mentions(message):
        return

    channel = await event.get_chat()
    link = await get_channel_link(event)
    channel_name = channel.title if hasattr(channel, "title") else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    text = f"üîî {prefix} –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ: {channel_name}\n"
    if link:
        text += f"üîó {link}\n\n"
    else:
        text += f"(ID –∫–∞–Ω–∞–ª–∞: {channel.id}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {event.message.id})\n\n"
    text += f"{message[:1500]}"

    if "tg" in SEND_TO:
        await send_telegram_notification(text)
    if "dc" in SEND_TO:
        await send_discord_notification(text)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage)
async def new_message_handler(event):
    if event.is_channel:
        await notify_all("–ù–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ", event)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.MessageEdited)
async def edited_message_handler(event):
    if event.is_channel:
        await notify_all("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ", event)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–∏ ===
async def main():
    await client.start(phone=phone_number)
    print("‚ñ∂Ô∏è –°–ª–µ–∂–∫–∞ –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∑–∞–ø—É—â–µ–Ω–∞...")
    await client.run_until_disconnected()

with client:
    client.loop.run_until_complete(main())